<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.2.1</version>
  </parent>
  <groupId>org.springframework.samples</groupId>
  <artifactId>spring-petclinic</artifactId>
  <version>3.2.0-SNAPSHOT</version>
  <name>petclinic</name>

  <properties>

    <!-- Generic properties -->
    <java.version>21</java.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!-- Important for reproducible builds. Update using e.g. ./mvnw versions:set -DnewVersion=... -->
    <project.build.outputTimestamp>2023-05-10T07:42:50Z</project.build.outputTimestamp>
    <checkstyle.version>10.12.5</checkstyle.version>
    <jacoco.version>0.8.11</jacoco.version>
    <lifecycle-mapping>1.0.0</lifecycle-mapping>
    <maven-checkstyle.version>3.3.1</maven-checkstyle.version>
    <checkstyle.version>8.44</checkstyle.version>
    <checkstyle.configDir>${project.basedir}</checkstyle.configDir>
    <spotless.version>2.43.0</spotless.version>
    <spotless-enforcement-branch>origin/main</spotless-enforcement-branch>
  </properties>

  <dependencies>
    <!-- Spring and Spring Boot dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-cache</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>

    <!-- Databases - Uses H2 by default -->
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.mysql</groupId>
      <artifactId>mysql-connector-j</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Caching -->
    <dependency>
      <groupId>javax.cache</groupId>
      <artifactId>cache-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-docker-compose</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>mysql</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>jakarta.xml.bind</groupId>
      <artifactId>jakarta.xml.bind-api</artifactId>
    </dependency>

  </dependencies>

  <build>
    <pluginManagement>
      <plugins/>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>enforce-java</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireJavaVersion>
                  <message>This build requires at least Java ${java.version}, update your JVM, and run the build again</message>
                  <version>${java.version}</version>
                </requireJavaVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <execution>
            <!-- Spring Boot Actuator displays build-related information
              if a META-INF/build-info.properties file is present -->
            <goals>
              <goal>build-info</goal>
            </goals>
            <configuration>
              <additionalProperties>
                <encoding.source>${project.build.sourceEncoding}</encoding.source>
                <encoding.reporting>${project.reporting.outputEncoding}</encoding.reporting>
                <java.source>${java.version}</java.source>
                <java.target>${java.version}</java.target>
              </additionalProperties>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Spring Boot Actuator displays build-related information if a git.properties
        file is present at the classpath -->
      <plugin>
        <groupId>io.github.git-commit-id</groupId>
        <artifactId>git-commit-id-maven-plugin</artifactId>
        <configuration>
          <failOnNoGitDirectory>false</failOnNoGitDirectory>
          <failOnUnableToExtractRepoInfo>false</failOnUnableToExtractRepoInfo>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>checkstyle</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-checkstyle-plugin</artifactId>
            <version>${maven-checkstyle.version}</version>
            <configuration>
              <configLocation>google_checks.xml</configLocation>
              <consoleOutput>true</consoleOutput>
              <failsOnError>true</failsOnError>
              <linkXRef>false</linkXRef>
              <suppressionsLocation>${checkstyle.configDir}/checkstyle-suppressions.xml</suppressionsLocation>
              <suppressionsFileExpression>checkstyle.suppressions.file</suppressionsFileExpression>
            </configuration>
            <dependencies>
              <dependency>
                <groupId>com.puppycrawl.tools</groupId>
                <artifactId>checkstyle</artifactId>
                <version>${checkstyle.version}</version>
              </dependency>
            </dependencies>
            <executions>
              <execution>
                <id>validate</id>
                <goals>
                  <goal>check</goal>
                </goals>
                <phase>validate</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>spotless</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>com.diffplug.spotless</groupId>
            <artifactId>spotless-maven-plugin</artifactId>
            <configuration>
              <!-- optional: limit format enforcement to just the files changed by this feature branch -->
              <ratchetFrom>${spotless-enforcement-branch}</ratchetFrom>
              <formats>
                <format>
                  <!-- define the files to apply to -->
                  <includes>
                    <include>*.md</include>
                    <include>.gitignore</include>
                  </includes>
                  <!-- define the steps to apply to those files -->
                  <trimTrailingWhitespace/>
                  <endWithNewline/>
                  <indent>
                    <tabs>true</tabs>
                    <spacesPerTab>2</spacesPerTab>
                  </indent>
                </format>
              </formats>
              <pom>
                <sortPom>
                  <encoding>UTF-8</encoding>
                  <!-- The encoding of the pom files -->
                  <expandEmptyElements>false</expandEmptyElements>
                </sortPom>
                <!-- has its own section below -->
              </pom>
              <!-- define a language-specific format -->
              <java>
                <!-- no need to specify files, inferred automatically, but you can if you want -->
                <importOrder/>
                <!-- standard import order -->
                <removeUnusedImports/>
                <replaceRegex>
                  <name>Remove wildcard imports</name>
                  <searchRegex>import\s+[^\*\s]+\*;(\r\n|\r|\n)</searchRegex>
                  <replacement>$1</replacement>
                </replaceRegex>
                <!-- self-explanatory -->
                <toggleOffOn>
                  <!-- exclude block of code from formatting -->
                  <off>@formatter:off</off>
                  <on>@formatter:on</on>
                </toggleOffOn>
                <cleanthat>
                  <version>2.14</version>
                  <sourceJdk>${java.version}</sourceJdk>
                  <!-- optional. Default to ${maven.compiler.source} else '1.7' -->
                  <mutators>
                    <mutator>SafeAndConsensual</mutator>
                    <!-- optional. Default to 'SafeAndConsensual' to include all mutators -->
                  </mutators>
                  <mutators>
                    <!-- List of mutators: https://github.com/solven-eu/cleanthat/blob/master/MUTATORS.generated.MD -->
                    <mutator>LiteralsFirstInComparisons</mutator>
                    <!-- You may alternatively list the requested mutators -->
                  </mutators>
                </cleanthat>
                <!-- apply a specific flavor of google-java-format -->
                <googleJavaFormat>
                  <style>GOOGLE</style>
                </googleJavaFormat>
                <formatAnnotations/>
              </java>
            </configuration>
            <executions>
              <execution>
                <id>validate</id>
                <goals>
                  <goal>apply</goal>
                </goals>
                <phase>validate</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>jacoco</id>
      <activation>
        <activeByDefault>false</activeByDefault>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>setup-jacoco</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
              </execution>
              <execution>
                <id>create-default-report</id>
                <goals>
                  <goal>report</goal>
                </goals>
                <phase>test</phase>
                <configuration>
                  <outputDirectory>${project.build.directory}/jacocoreport</outputDirectory>
                  <!-- This excludes are only for this template, but it can be modified or removed from developers.
                  We decided to  exclude this packages or files because there was no significant implementation logic.
                  If there were significant implementation logic, tests must be done -->
                  <!--suppress UnresolvedMavenProperty -->
                  <excludes>**/web/dto/**/*,
                    **/web/api/**/*,
                    **/VirtualEntityApplication.class,
                    ${jacoco.extra-excludes}</excludes>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>groovy-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>test</phase>
                <configuration>
                  <!--suppress UnresolvedMavenProperty -->
                  <source>def reportFile = new File("target/jacocoreport/index.html")

                    if (!reportFile.exists() || !reportFile.canRead()) {
                      println "[JacocoPrinter] Skipped due to missing report file."
                      return
                    }

                    reportFile.withReader('UTF-8') { reader -&gt;
                      def html = getParser().parseText(reader.readLine())
                      def totalRow = html.body.table.tfoot.tr
                      def instructionMissed = totalRow.td[1]
                      def instructionRatio = totalRow.td[2]
                      def branchMissed = totalRow.td[3]
                      def branchRatio = totalRow.td[4]
                      println "[Coverage Results:] Instructions ${instructionRatio} (Missed ${instructionMissed})"
                    }

                    XmlSlurper getParser() {
                      parser = new XmlSlurper()
                      parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
                      parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
                      return parser
                    }</source>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>
